{"version":3,"sources":["components/Searchbox/Searchbox.js","components/FocusCity.js","components/AqiContent.js","actions.js","constants.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Searchbox","CountyList","onchangeCountyAqi","countyarray","map","county","i","key","value","className","onChange","defaultValue","FocusCity","focusSite","color","AQI","SiteName","O3","CO","SO2","NO","AqiContent","onChangeFocusSite","County","datas","PublishTime","data","onClick","text","type","payload","App","onchangeSite","event","console","log","target","props","onChangeCounty","countyChangeSiteChange","site","find","onRequestAqi","this","setCounty","setfocusSite","filterdatas","filter","filterCity","length","Component","connect","state","requestAqi","isPending","error","countyList","dispatch","textContent","fetch","then","response","json","singleCounty","element","index","arr","indexOf","catch","Boolean","window","location","hostname","match","intialStateData","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1cb0dd23.chunk.js","sourcesContent":["import React from 'react';\nimport './Searchbox.css';\n\nconst Searchbox = ({ CountyList, onchangeCountyAqi })=>{\n  const countyarray = CountyList.map((county, i)=>{\n    return <option key={i} value={county}>{county}</option>;\n  })\n  return (\n    <div className='flex tc aqi-searchbox'>\n      <div className='aqi-title flex'>\n        <h1>空氣品質指標(AQI)</h1>\n        <select onChange={onchangeCountyAqi}>\n          <option defaultValue>請選擇地區</option>\n          { countyarray }\n        </select>\n      </div>\n      <ul className='aqi-list flex bg-white'>\n        <li>\n          <p className='bg-light-green'>0~50</p>\n          <p>良好</p>\n        </li>\n        <li>\n          <p className='bg-light-yellow'>51~100</p>\n          <p>普通</p>\n        </li>\n        <li>\n          <p className='bg-light-orange'>101~150</p>\n          <p>對敏感族群<br />不健康</p>\n        </li>\n        <li>\n          <p className='bg-light-red'>151~200</p>\n          <p>對所有族群<br />不健康</p>\n        </li>\n        <li>\n          <p className='bg-light-purple'>201~300</p>\n          <p>對所有族群<br />不健康</p>\n        </li>\n        <li>\n          <p className='bg-dangerous'>301~400</p>\n          <p>危害</p>\n        </li>\n      </ul>\n    </div>\n  )\n}\n\nexport default Searchbox;","import React from 'react';\nimport './Focus.css';\n\nconst FocusCity = ({ focusSite })=> {\n    let color = '';\n    let AQI = focusSite.AQI;\n    switch(true){\n      case AQI >= 0 && AQI <= 50 :\n          color = 'bg-ligth-green';\n        break;\n      case AQI >= 51 && AQI <= 100 :\n          color = 'bg-light-yellow';\n        break;\n      case AQI >= 101 && AQI <= 150 :\n          color = 'bg-light-orange';\n        break;\n      case AQI >= 151 && AQI <= 200 :\n          color = 'bg-light-red';\n        break;\n      case AQI >= 201 && AQI <= 300 :\n          color = 'bg-light-purple';\n        break;\n      case AQI >=300 && AQI <=400 :\n          color = 'bg-dangerous';\n        break; \n    }\n\n  return (\n    <div>\n      <ul className=\"aqi-focus bg-white\">\n          <li className=\"aqi-box\">\n            <p>{ focusSite.SiteName }</p>\n            <p className = {color}>{ focusSite.AQI }</p>\n          </li>\n          <li className='aqi-text'>\n            <p>臭氧 <span>O<sub>3</sub>(ppb)</span></p>\n            <p>{ focusSite.O3 }</p>\n          </li>\n          <li className='aqi-text'>\n            <p>懸浮微粒 <span>PM<span className='half'>10</span>(ug/m<sup>3</sup>)</span></p>\n            <p>{ focusSite['PM10'] }</p>\n          </li>\n          <li className='aqi-text'>\n            <p>細懸浮微粒 <span>PM<span className='half'>2.5</span>(ug/m<sup>3</sup>)</span></p>\n            <p>{ focusSite['PM2.5'] }</p>\n          </li>\n          <li className='aqi-text'>\n            <p>一氧化碳 <span>CO(ppm)</span></p>\n            <p>{ focusSite.CO }</p>\n          </li>\n          <li className='aqi-text'>\n            <p>二氧化硫 <span>SO<sub>2</sub>(ppb)</span></p>\n            <p>{ focusSite.SO2 }</p>\n          </li>\n          <li className='aqi-text'>\n            <p>二氧化氮 <span>NO<sub>2</sub>(ppb)</span></p>\n            <p>{ focusSite.NO }</p>\n          </li>\n        </ul>\n    </div>\n  )\n}\n\nexport default FocusCity;","import React from 'react';\nimport FocusCity from './FocusCity';\nimport './AqiContent.css'\n\nconst AqiContent = ({onChangeFocusSite, County, datas, focusSite})=>{\n  return (\n    <div>\n      <div className=\"aqi-content-title flex\">\n        <h2>{ County }</h2>\n        <p>{ focusSite.PublishTime } 更新</p>\n      </div>\n      <div className=\"aqi-content-main flex\">\n        <FocusCity focusSite= {focusSite}/>\n        <div className='aqi-content-list flex'>\n          { \n            datas.map((data, i)=>{\n              let color = '';\n              let AQI = data.AQI;\n              switch(true){\n                case AQI >= 0 && AQI <= 50 :\n                    color = 'bg-ligth-green';\n                  break;\n                case AQI >= 51 && AQI <= 100 :\n                    color = 'bg-light-yellow';\n                  break;\n                case AQI >= 101 && AQI <= 150 :\n                    color = 'bg-light-orange';\n                  break;\n                case AQI >= 151 && AQI <= 200 :\n                    color = 'bg-light-red';\n                  break;\n                case AQI >= 201 && AQI <= 300 :\n                    color = 'bg-light-purple';\n                  break;\n                case AQI >=300 && AQI <=400 :\n                    color = 'bg-dangerous';\n                  break; \n              }\n              return (\n                <div \n                  className=\"aqi-box bg-white\"\n                  key={i}\n                  >\n                    <p onClick={ onChangeFocusSite } >\n                      { data.SiteName }\n                    </p>\n                    <p className={color}>{ data.AQI }</p>\n                </div>\n              )\n            })\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default AqiContent;","import { \n  ON_CHANGE_COUNTY, \n  ON_CHANGE_FOCUS_SITE,\n  REQUSET_AQI_PENDING,\n  REQUSET_AQI_SUCCESS,\n  REQUSET_AQI_ERROR,\n} from './constants';\n\nexport const onChangeCounty = (text) => ({\n      type: ON_CHANGE_COUNTY,\n      payload: text,\n})\n\n\nexport const onChangeFocusSite = (text) =>({\n  type: ON_CHANGE_FOCUS_SITE,\n  payload: text,})\n\nexport const requestAqi = ()=>(dispatch)=>{\n  const url = 'https://opendata.epa.gov.tw/api/v1/AQI?%24skip=0&%24top=1000&%24format=json';\n  dispatch({type: REQUSET_AQI_PENDING, isPending: true});\n  fetch(url)\n    .then(response => response.json())\n      .then(datas=> {\n        let countys = datas.map(data=> data.County);\n        const singleCounty = countys.filter((element, index, arr) => {\n        return arr.indexOf(element) === index;\n      });\n        let County = datas[0].County;\n        let focusSite = datas[0].SiteName;\n        return dispatch({type:REQUSET_AQI_SUCCESS, payload: datas, countyList:singleCounty,County:County,focusSite:focusSite})})\n      .catch(error => dispatch({type:REQUSET_AQI_ERROR, payload: error,isPending: false}))\n}","export const ON_CHANGE_COUNTY = 'ON_CHANGE_COUNTY';\nexport const ON_CHANGE_FOCUS_SITE = 'ON_CHANGE_FOCUS_SITE';\nexport const REQUSET_AQI_PENDING = 'REQUSET_AQI_PENDING';\nexport const REQUSET_AQI_SUCCESS = 'REQUSET_AQI_SUCCESS';\nexport const REQUSET_AQI_ERROR = 'REQUSET_AQI_ERROR';\n\n\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Searchbox from '../components/Searchbox/Searchbox';\nimport AqiContent from '../components/AqiContent';\nimport './App.css'\nimport { onChangeCounty, onChangeFocusSite, requestAqi} from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    setCounty: state.requestAqi.County,\n    setfocusSite: state.requestAqi.focusSite,\n    datas: state.requestAqi.datas,\n    isPending: state.requestAqi.isPending,\n    error: state.requestAqi.error,\n    CountyList: state.requestAqi.countyList,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n  return{\n  onChangeCounty: (event) => dispatch(onChangeCounty(event.target.value)),\n  onChangeFocusSite: (event) => dispatch(onChangeFocusSite(event.target.textContent)),\n  countyChangeSiteChange: (text) => dispatch(onChangeFocusSite(text)),\n  onRequestAqi: ()=>dispatch(requestAqi()),\n  }\n}\n\n\n\nclass App extends Component {\n  \n  componentDidMount(){\n    const { onRequestAqi} =this.props;\n    onRequestAqi(); \n    console.log(this.props)  \n  }\n  onchangeSite=(event)=>{\n    console.log(event.target.value,this.props.datas)\n    const {datas, onChangeCounty, countyChangeSiteChange } =this.props;\n    let site = datas.find(data =>{\n      return data.County === event.target.value\n    }).SiteName\n    console.log(site)\n     onChangeCounty(event);\n     countyChangeSiteChange(site);\n  }\n  \n\n  render() { \n    \n    const {CountyList ,datas, onChangeFocusSite, setCounty, setfocusSite} = this.props;\n\n    const filterdatas = datas.filter(data => data.County === setCounty);//篩選相同城市的資料\n    const filterCity = datas.filter(data => data.SiteName === setfocusSite); //選取點選的地區資料 \n    \n    return filterdatas.length === 0 || filterCity.length === 0 ? \n      <h1>Loading</h1> :\n      (\n        <div className='wrap'>\n          <Searchbox \n            CountyList={ CountyList }\n            onchangeCountyAqi={this.onchangeSite} \n          />\n          <AqiContent \n            County={setCounty} \n            datas={filterdatas} \n            focusSite={filterCity[0]}\n            onChangeFocusSite = {onChangeFocusSite}\n            />\n        </div> )\n      }      \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App) ;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n  ON_CHANGE_COUNTY, \n  ON_CHANGE_FOCUS_SITE,\n  REQUSET_AQI_PENDING,\n  REQUSET_AQI_SUCCESS,\n  REQUSET_AQI_ERROR,\n} from './constants';\n\n\nconst intialStateData ={\n  datas: [],\n  countyList:[],\n  focusSite: '',\n  County: '',\n  isPending: false,\n  error: '',\n}\n\nexport const requestAqi = (state=intialStateData, action={}) =>{\n  switch(action.type){\n    case REQUSET_AQI_PENDING:\n      return Object.assign({}, state, {isPending: true});\n    case  REQUSET_AQI_SUCCESS:\n      return Object.assign({}, state, {datas: action.payload,countyList: action.countyList,County:action.County,focusSite:action.focusSite });\n    case  REQUSET_AQI_ERROR:\n      return Object.assign({}, state, {error: action.payload, isPending: false})\n    case ON_CHANGE_COUNTY:\n        return Object.assign({},state,{County: action.payload})\n    case ON_CHANGE_FOCUS_SITE:\n        return Object.assign({},state,{focusSite: action.payload})  \n    default:\n      return state;  \n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { requestAqi } from './reducers'\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ requestAqi})\n\nconst store = createStore(rootReducer, applyMiddleware(logger, thunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}